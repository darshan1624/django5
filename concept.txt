django, benefits
django proj, app, file structure
view, urls
create templates, render template, variabes, filters, conditons, loops
create static files, how to laod static files in template
template inheritance extends, load static in invidual inherited child template
Hyperlink name url
include template
ORM
admin interface
How to create forms, include form in template, 
customize form at field level (for loop, visible_fields, hidden_fields)
diff fields in form class and their arguements, widget
POST request in form
validations in form (field, object, validators)
customise form field errors
ModelForm
Dynamic URL



Django5 
- web framework written in python
- encourgaes rapid development, reusabilty
- follows MVT architecture


Advantages
- Builtin Admin Interface
- ORM (dont have to write raw sql query, can connect any type of db
	postgres, mysql, oracle, mongodb)
- Authentication System (Inbuilt authentication system)
- Security


Django Project 
A group of application is called as Django Project.
e.g.: School Management System(SMS) project may contain
	registeration App, Fees App, Exam App, Result App 

Command to create django project
django-admin startproject StudentManagementSystem . 
// if "." dot is given outer folder wont be created.

File structure in django project
 - __init__.py 
	this file creates folder as package in python
 - wsgi.py  (web server gateway interface)
	acts as a interface between your project and webserver
	this describes how web app will communicate with webserver
 - asgi.py  (asynchonous server gateway interface)
 - settings.py 
	all the settings are done here like allowed host, apps used, 
	middleware, template directory, db connection, timezone, 
	static folder dir, global varaibles
 - urls.py 
	all app urls are metioned here
 - manage.py 
	this file is used to run server, create applications


 __pycache__ 
	this folder gets created when you do runserver. This is 
	created to store cache for faster webpage loading 

Django Application
Command to create app
python manage.py startapp app1

File structure in app
 - migrations 
	this folder contains all migration files 
 - admin.py 
	when we want to show db table in admin panel we reister it here
 - apps.py 
 - models.py 
	models are defined here table structure is created here
 - tests.py 
	unit test are written over here
 - views.py 
	project business logic is written over here

The app to be detected by django project it need to be mentioned
in INSTALLED_APPS = ['app1',]


How to create function based view (in view.py of django app)
from django.http import HttpResponse
def learn_django(request):
	return HttpResponse("Learn Django")

In urls.py of django project
path('learn-django/', views.learn_django, name='learndjango')

Can view local web page at url
http:/127.0.0.1:8000/learn-django


How are urls written ? 
syntax: path('route/', view, kwargs, name)
 kwargs - it is used to pass any arguments to view
 name - it is used for url reversion

kwargs e.g.: 
path('learn-django', views.learn_django, {'status': 'OK'})

def learn_django(request, **kwargs):
	status = kwargs.get('status')
	return HttpResponse(f'<h1> Learn Django {status} </h1>')

// You can metion urls of apps directly in django project where 
 settings.py when its a small project. 
 But when you have mutiple apps its best practice to keeps urls 
 separated and mention in the app itself. So, that this app can be 
 used easily in some another project (hint: sms, teacherManagetSystem)

How to metion different url in app itself?
 (same as we do directly in project urls)
 path('learn-django', views.learn_django, {'status': 'OK'})
 
 For it to work we also need to metion it in project urls.
 from django.urls import path, include
 path('app1/', include('app1.urls'))

url - http:/127.0.0.1:8000/app1/learn-django


How are templates created?
Inside app create teamplates folder and inside teamplates create 
folder with app named again, inside this app folder u can create
.html files.
	app name= course
	course>templates>course>django.html, fastapi.html

How to render template?
In views.py
from django.shortcuts import render

def learn_django(request):
	return render(request, 'course/django.html')


Django Template Language:
How to create dynamic template?
- variables
In views.py
	def learn_django(request):
		coursename = {'cname':'Dajango', 'version':5.0}
		return render(request, 'course/django.html', coursename)

In django.html
<body> <h1> This is a {{cname}} course using {{verison}} version.
	</h1></body>

- filters
dj template provides in built filters on text in HTML.

<body> 
    <h2> Name: {{name|upper}}</h2>    amit: AMIT
    <h2> desc: {{desc|truncatewords:4}} </h2>  This is template code ... 

Multiple pipe filters
    <h2> desc: {{desc|upper|truncatewords:3}} </h2>
</body>

other filters: 
 lower, capfirst, default:'nothing', length, slice, truncatechars:2, 
 floatformat:2


- conditions (if, elif, else, endif)
 context = {'nm' : 'Amit'}
    <h2> If Tag </h2>
	{% if nm %}		
	  <h3> Name: {{nm}} </h3>
	{% endif %}

 Boolean (and, or, not)
 context = {'nm' : 'Amit', 'st': 108}
   	{% if nm and st %}
		<h3> Name: {{nm}}, Seat: {{st}} </h3>
	{% endif %}
 Operators
 	{% if nm == 'Mumbai' and st > 100 %}
		<h3> Seats Full </h3>
	{% elif nm == 'Mumbai' and st > 50 %}
		<h3> Seats Half Full </h3>
	{% else %}
		<h3> Seats available </h3>
	{% endif %}
	
 filter
	{% if nm|length >= 4 %}
		<h3> {{nm}} </h3>
	{% endif %}		

- loops
 context = {'names': ['Amit', 'Anket', 'Oliva', 'Sanket']}
 {% for name in names %}
	<li> {{name}} </li>
 {% endfor %}
 reversed list of names
 {% for name in names reversed %}
	<li> {{name}} </li>
 {% endfor %}


How to access elemnts in nested dict in templates?
stu = {
		'stu1': {'name': 'amit', 'roll': '101'},
		'stu2': {'name': 'anket', 'roll': '102'},
		'stu3': {'name': 'oliva', 'roll': '103'},
		'stu4': {'name': 'sanket', 'roll': '104'},
	}
students = {'student': stu}
context = students 
<h2> {{student}} </h2> ==> entire stu dict is printed
<h2> {{student.stu1}} </h2> ==> 1st dict is printed
<h2> {{student.stu1.name}} </h2> ==> 'amit' name is printed 


context = {'stu1': {'name': 'amit', 'roll': '101'}}
{% for key, value in student.items %}
	{{key}} - {{value}} <br/>
{% endfor %}


How to store static files?
(css, javascript)
To include static files in app, create 
	static>app_name>css> style.css
			>js> script.js
			>images> img.jpeg

when including css, js in html file, you need to load static file first.
{% load static %}
<html >
<head> 
    <link rel='stylesheet' href = "{% static 'app_name/css/style.css'%}">
    <script src="{% static 'app_name/js/script.js'%}"> </script>

</html>


Template Inheritance:
Rather that creating same components like nav, footer in every webpage
we can create it in single .html file and inherit that code in other
.html files.

base.html 
suppose base.html file has all the required components. 
and I want same implemented in home.html
home.html
{% extends 'app_name/base.html' %}

Now suppose base.html has <title> </title> tag which is needed in both
home.html as 'Home Page' and in about.html as 'About Page'.

so, to make it dynamic we provide that specfic input from home.html, 
about.html.

base.html
	..
	<title> {% block title %}  
		{% endblock %}
	</title> 
	..

home.html 
{% extends 'app_name/base.html' %}
{% block title %}  
	Home Page
{% endblock %}

Similar to title we can have other content diff for diff pages.


How to apply css/js/images when implemented template inheritance for
specific pages?
style.css
	body {
		background-color: gray;
	} 
	h1 {
		color:green;
	}

base.html
{% block css %} 
    <link rel='stylesheet' href = "{% static 'app_name/css/style.css'%}">
{% endblock css %} 
	##applying this way it gives default style value to every 
	page
	##if diff is required in some page then can implement this 
	block css.


Hyperlink:
Without hyper link we have to hardcode like below
urls.py
	path('core/', include('core.urls')), 
	path('course/', include('course.urls'))

	inside core app urls.py 
	path('home/', views.home)
	path('about/', views.about)

base.html	
<ul>
	<li> <a href='/core/home'> </a> <li> 
	<li> <a href='/core/about'> </a> <li>
	<li> <a href='/course/django'> </a> <li>
</ul>

Using hyperlink
	path('home/', views.home, name='home')
	path('about/', views.about, name='about')

<ul>
	<li> <a href="{% url 'home'%}">Home</li>
	<li> <a href="{% url 'about'%}">About</li>
	<li> <a href="{% url 'django'%}">Django</li>
</ul>

Just like extends in ineritance we can use include to include 
templates inside another template.
e.g.:
templates/app_name/components/navbar.html

base.html
<body>
{% include 'core/components/navbar.html' %}
{% block content%} {% endblock content %}
{% block footer%} {% endblock footer %}
</body>
	




Object Relational Mapper(ORM):
ORM allows communication between application and database.
Benefits: 
	- You dont need to know sql, oracle, mysql, sqllite to
		 create databse and perform query
	- Can switch to diff db anytime e.g.: from sql, postgres 


model - It is a structure of the table in db.
How to create model?
from django.db import models
class Profile(models.Model):
	name = models.CharField(max_length=200)
	email = models.EmailField(max_length=200)
	city = models.CharField(max_length=200)
	roll = models.IntegerFied()

migrations - Indetify any change in model and create file for it.
	- we can say, it creates SQL statement to create table.

migrate - It excutes those migratetion files to create table in db.

> python manage.py makemigrations
> python manage.py migrate 


The table that will be created in db will have by default this name
> appname_modelname
e.g.: if app_name = student, model_name = Profile
then, table_name = student_profile 


To view migration files for entire project excute
> python manage.py showmigrations

To view sql command generated in migration file after running 
makemigrations excute
> python manage.py sqlmigrate student 0001



Admin Interface: 
http://127.0.0.1:8000/admin

> python manage.py createsuperuser


How to register a model in admin.py?
In admin.py
from student.models import Profile
admin.site.register(Profile)

How to view actual name in admin.py when clicked on model in admin.py
use __str__

class profile(models.Model):
	..

	def __str__(self):
		return self.name

#### cannot return int attribute like roll. always return str.


How to view more than one column from db in admin.py?
In admin.py 
from student.models import Profile
class ProfileAdmin(admin.ModelAdmin):
	list_display = ['name', 'roll']

admin.site.register(Profile, ProfileAdmin)




Django Forms:
These are normal froms like register forms, etc.
You can create forms in two ways
- using django form api 
- modelforms

Benefits of django forms? 
- Django Forms automatically validate fields. e.g. max_length, 
field required.
- Can add custom validations
- forms encapsulate logic, so views remain clean.

How to create form? 
create a forms.py file in app.
In forms.py
	
from django import forms
class Registration(forms.Form):
	first_name = forms.CharField()
	last_name = forms.CharField()
	email = forms.EmailField()
	city = forms.CharField()

Now inside views.py import Registration form and pass the object to
dyanmic template.

In views.py
from student.forms import Registration
def register(request):
	form = Registeration()
	return render(request, 'student/register.html', 
				context = {'fm':form})

In register.html
<body> 
<h1>
	<form> {{fm}} <form>
</h1>
</body>  

# This creates a from for you. 
 -  By this method you only get lable tag and input tags both 
    inside div.
 - Such multiple div are formed for each input field.
 - form tag and button is not provided.Create on your own.
	<form action=""> {{form}} 
		<input type="sumbit" value="Submit"> 
	<form>
 - field type CharField, EmailField becomes your input type 
	<input type='email'> in form.

Customize form class object
 - form.as_table 
	provides tr, th tags instead of div
	can use <table> manually which usally includes tr, th 
	{{form.as_table}}
 - form.as_ul
	provides <ul> and <li> instead of div
 - form.as_p
	provides <p> tag instead of div 
 - form.first_name
	provides only input field for first_name and no other tags
	(no label) or any field

Initial(Default Value):
form class Registeration can take field intital value as parameter.
e.g.: 	form = Registeration(intial= {'email': 'amit@gmail.com'})
	The input will be amit@gmail.com for input field by default.

Can also be acheived by writing form class itself.
class Registeration(forms.Form):
	first_name = forms.CharField(intial='Amit')


form fields can be ordered
e.g.: form = Registeration(field_order=['email', 'city'])



Above method works using {{form}}, but following method allows more 
customisation, writing fields individually.
differnent ways
	- form.first_name
	- form.first_name.name
	- form.first_name.label_tag
	- form.first_name.label
	- form.first_name.id_for_label	
	- form.first_name.value|default=''

Get label and input field:
<form>
	{{form.first_name.label_tag}} {{form.first_name}} </br>
	{{from.last_name.label_tag}} {{form.last_name}}
</form>

 == > HTML code generated
	<label for="id_first_name">First name:</label>
	<input type="text" name="first_name" required="" id="id_first_name">


# can also use <label for="id_first_name">First name:</label>
# but id had to be provided correctly in for, which can be done 
in following way.
<label for = "{{form.first_name.id_for_label}}"> First Name</label>
{{form.first_name}}

# "First Name" text for label can also be replaced with .label but 
# it doesnt provide label tag.
{{form.first_name.label}} 


Now above we have seen example for how to create lablel and input
field for first_name. similarly, we have to do for other fields. 
This can be done using for loop.
<form>
  {% for field in form%}
    <label for = "{{field.id_for_label}}"> {{field.label}}</label>
    <input type='{{field.field.widget.input_type}}' 
	name='{{field.name}}' required id ="{{field.id_for_label}}">
  {% endform %}
<form>


Now in case of hidden inputs, u have to write two for loops.
hidden inputs - not visible on UI but when submited send some value to
	backend.
	<input type="hidden" name="key" value="some_value">

How to create hidden fields in form?
class Login(forms.Form):
	email = forms.EmailField()
	password = forms.CharField()
	key = forms.CharField(widget=forms.HiddenInput())

perform two loops to show visible_fields, and hide hidden_fields.
{% for field in form.visible_fields %}
	here u will show both label and input field
	# wont include Key
{% for field in form.hidden_fields %}
	here only show input field
	# will incldue Key


Different fields, arguments, widgets in form class:
widgets - They are argument but used to control how the form fields
	look and behaves in the browser.
	widgets change the type of field <input type] =''> 
	widgets add placeholder, class

class DemoForm(forms.Form):
	name = forms.CharField( label='Full Name', 
		max_length=100, 
		intial = 'Amit', 
		validators = [MinLengthValidator(3)]
			# length must be greater than 3 chars
		widget = forms.TextInput(
			 attrs={'placeholder': 'Type here'},
			 'class': 'mycss')
	)

	email = forms.EmailField(
		disabled = True # cant enter any email here
	)

	pin_code = forms.IntegerField(
		label = 'Pin Code'
		min_value = 1000
		max_value = 9999	
	)

	age = forms.FloatField()
	dob = forms.DateField(
		required = False 	
	)
	is_subscribed = forms.BooleanField()
	
	phone_no = forms.RegexField(regex=r'^\+?1?\d{9,15}$')
	password = forms.CharField(widget=forms.PasswordInput())
	slug = forms.SlugField()
	rating = forms.DecimalField()




Request, Repsonse in form:
How to get data in backedn when form is submitted? 

login.html
<form action="" method='POST'>
	{% csrf_token %}
	{{fm.as_p}}
	<input type='submit'>
<form>

steps to follow in views.py 
	- validate data 
	- get clean data 

Wrong way to get data from request
def register(request): 
	if request.method == 'POST':
		name = request.POST['name']
		email = request.POST['email']
		password = request.POST['password']

Correct way according to dajngo
	- first validate using .is_valid() then get clean data

def register(request):
	if request.method == 'POST':
	    form = Registeration(request.POST)
	    if form.is_valid():
		name = form.cleaned_data['name']
		email = form.cleaned_data['email']
		password = form.cleaned_data['password']
	    else:
		form = Registeration()
	return render(request, 'student/register.html', {'form': form})
	
	## cleaned_data is a dictionary.
	## cleaned_data = {'name': 'Amit', 'email':'abcd@g.com', 
			'password':'123456'}

Now if you go on web and refresh page, it will resubmit the form 
details. To avoid django say redirect user to some other html page
or same page.
	from django.https import HttpResponseRedirect
	return HttpResponseRedirect('student/success')

- novalidate 
    Html validation wont happen. e.g.: this field is required prompts.
    But then django form validation will still work, while submitting.
If <form action="" method="POST" novalidate>




Validations in Forms:
- field level validation
- object level validation
- validators 

field level validation
- peformed on single field. 
- Must return a value or raise forms.ValidationError.

syntax: def validate_fieldname(self)
class Login(forms.Form):
	username = forms.CharField(label='Username', initial = 'abcd', 
			max_length=200)
	email = forms.EmailField()
	password = form.CharFiled(widget=forms.PasswordInput())
	
	def validate_username(self):
       	    username = self.cleaned_data['username']
	    if len(username) < 4:
	        raise forms.ValdiationError('Enter chars more than 4')
	    return username


object level validation
- peformed when we want to validate on mutliple fields
- must return a cleaned_data, with errors if present.

synatx: clean(self)

def clean(self):
		
	username = self.cleaned_data['username']
	email = self.cleaned_data['email']
		
	if len(username) < 4:
		self.add_error('username', 'Enter more than 4 char.')
	if len(username) < 4:
		self.add_error('username', 'Enter more than 4 char.')
		
	return self.cleaned_data


validators
- Can create custom validators for field.

def start_with_s(value):
	if value[0] != 's':
	    raise forms.ValidationError('Email should start with s')

class Login(forms.Form):
	username = forms.CharField(validators=[start_with_s])

#The error is returned to web, since we will return
Login(request.POST) which validates the data.



Errors in forms:
- In class Login form you can modify the error message.
e.g.:
	name = forms.CharField(error_message={'required': 'Name is 
		required'})
	# orginally it says "This field is required"

- When we use for loop in template to show form fields, the error tag
 gets removed. so, we need to mention it.
	
	{% for field in form %}
		{{field.label_tag}} {{field}} {{field.errors}}
	{% endfor %} 


How to post, update, delete data in db?
from student.views import Profile

if request.method == 'POST':
    form = Login(request.POST)
	if form.is_valid():
		username = form.cleaned_data['username']
		email = form.cleaned_data['email']
		password = form.cleaned_data['password']
		stu = Student.objects.create(username = username,
			email=email, password = password)
		stu.save()
		
similarly, for request.method == 'PUT'
stu = Student.objects.update(id=1, username = username,
	email=email, password = password)
stu.save()

for request.method == 'DELETE'
stu = Student.objects.get(id=1).delete()



- ModelForm
	The ModelForm provides u a shortcut that lets u automatically 
 form class with fields that correspond to model fields.

 # Few fields in model are irrelavant to form class.
 like for e.g. Autofield in model wont have any meaning i form.
 # if blank =True in charfield for name in model, then its set as
 not required in form.

class Registeration(forms.ModelForm):
	class Meta:
		model = Profile
		fields = ['name', 'email', 'password']
		labels = {'name':'Enter Name', 'email':'Enter Email'}

	# can also use fields, exclude.



Dynamic URL:
from student import views
path('profile/<int:id>', views.profile, name='profile')
path('profile/<slug:id>', views.profile, name='profile')
path('profile/<str:id>', views.profile, name='profile')

#slug - its a url with small chars, -, number. 
	e.g.: http://127.0.0.1:8000/10-django-rules



Admin Panel:
Admnin Panel contains Authentication and Authorization application by
default which contains two models
- Groups
- Users

Using Users you can 
 change the username, password, 
 add first, last name and email address
 can change type of user 
 can assign group to user
 can give CRUD permission of each model created to user 
 can view last login, date joined

Using Groups
 You can create group and name it. 
 Group contains multiple permissions 

Types of Users:
- Active User (tells the user exists with particular username, instead
		of deleteing make inactive)
- is_staff User (Can login Admin Panel, but cant view anything if no
		permissions given)
- is_superuser (has all the permissions)



##############PROJECT: Ch42
Frontend Code
#############################
Utilities:
Home 
Registeration form 
email activation 
login 
 - customer dashboard 
 - seller dashboard

change, reset password 
Logout 


Tailwind css
# use any frontend lang you want.


Project structure 
apps
- account 
- customer
- seller 

account> templates 
- base.html
	nav bar 
	url for home, Register, login buttons 
	If user logged in show Dashboard, Logout buttons 
- home.html
- register.html
- login.html
- password_reset.html
- password_reset_confirm.html
- activation_email.html
Views: 
- home 
- login
- register
- password_reset_view
- password_reset_confirm_view


customer> templates
- dashboard.html
- password_change.html
Views:
- customer_dashboard_view
- password_change_view

seller>templates 
dashboard.html 
Views:
seller_dashboard_view

#############################

Custom User Model:

account> models.py 

# Whenever using custom user table you have decide this very early 
# during developement. 
# You shouldnot swicth between admin panel to custom between development. 

- To create custom user model inherit AbstractBaseUser Model.

from django.contrib.auth.models import AbsractBaseUser

Class User(AbstactBaseUser):
	email = models.EmailField(max_length = 255, unique = True)
	name = models.CharField(max_length=255)
	city = models.CharField(max_length=255)
	is_active = models.BooleanField(dafault=False)
	is_staff = models.BooleanField(dafault=False)
	is_superuser = models.BooleanField(dafault=False) 
	is_customer = models.BooleanField(dafault=False)
	is_seller = models.BooleanField(dafault=False)
	created_at = models.DateTimeField(auto_now_add=True) # is set only once
	updated_at = models.DateTimeField(auto_now=True) # updated every time u make changes to that model object
	
# By default admin panel takes username, password. 
# But we want email instead of username
	USERNAME_FIELD = 'email'

# This class User must be used while executing createsuperuser
	objects = UserManger() 


Permission Tables: 
 Whenever we do makemigrations, migrate for first time following 
 tables are created
- content_type
- auth_permission
- auth_user_user_permissions
- auth_group_permissions
- auth_user_groups

- content_type 
 It stores a app-model mapping for every installed app.
 e.g.: suppose app "store" has "Product" model.
	id	app_label	 model
	5 	store   	Product  

- auth_permission
 whenever a model is created and makemigrations, migrate is done.
 4 permissions are created for each new model. 
	e.g.: model product
	app_name.add_product, . change_product, 
	.delete_product, .view_product 
 These permissions are linked to models defined in content_type using
 forign key content_type_id. 
 e.g.:
	id 	content_type_id    codename 		name
	20	5		   add_product      Can add Product		
	21	5		   change_product      Can change Product
	22	5		   delete_product      Can delete Product
	23	5		   view_product      Can view Product		    

- auth_user_user_permissions
	These permissions are assigned manually.
	columns : (id user_id permission_id)

- auth_group 
	columns : (id name)

- auth_user_groups
	columns : (id user_id group_id)



Django's built-in authentication and permission system uses the 
following methods on the user model
- has_perm(perm, obj=None)
- has_perms(perm_list, obj=None)
- has_module_perms(app_label)

	def has_perm(self, perm, obj=None):
		return self.is_superuser

	def has_module_perms(self, app_label):
		return self.is_superuser
# gives permission only if the user is_superuser

They are used in Django admin, views, templates	to check if the user
has specfic permissions.
e.g.: 
In views.py (In delete request.method == 'DELETE')
	if not request.user.has_perm('app_name.delete_product'):
		return HttpResponse('You dont have delete permssions')

	#'app_name.delete_product' is a auth_permission.

Internal working of has_perm()
 - It breaks 'app_name.delete_product' into app_label and codename
 i.e. app_name, delete_product. It looks for
 permission_id with that app_label, codename in auth_permission table.
 - Then checks if user has that permission_id in auth_user_user_permissions
 table.
 #In above implementation we have overwridden and only checking if 
 is_superuser.
 

has_module_perms('store') will look for if the user has access to
particular app using tables auth_user_user_permissions, 
auth_permission, content_type.


Custom Manager:
- You need to define custom manager class to handle custome user 
model.
- BaseUserManger class provides the logic to create superuser and 
regular users. 
- BaseUserManger has implementaion for create_user() and 
create_superuser()
- without defining this class for custom user model (taking email
instead of username) will fail running createsuperuser.

from django.contrib.auth.models import BaseUserManger

class UserManger(BaseUserManager):
    def create_user(self, email, password=None):
	if not email:
	    raise ValueError('User must have an valid email')
	user = self.model(email=self.normalize_email(email))
	user.set_password(password)
	user.save()
	return user
- self.model() is same as saying User(). self.model refers to the 
 model where this class UserManager() object is created that is User
 class.

# self.normalize will make capital email to small letters.
# used .set_password insetad of .password as it encrypts passsword.

    def create_superuser(self,email,password=None):
	user = self.create_user(email, password)
	user.is_staff = True
	user.is_superuser = True
	user.is_customer = True
	user.is_seller = True
	user.save()
	return user


How to configure cutsom user model in settings.py?
	AUTH_USER_MODEL = 'account.User'
If not specified it will use defualt buitlin User Model.


python manage.py createsuperuser will call create_superuser() function.

------------------------------------------------------------
## Now we want to register a new user using registeration from.
For thate we have 
account> templates> register.html  

How to create dajngo registeration form in backend? 
from django import forms

class RegisterationForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput)
    confirmPassword = forms.CharField(widget=forms.PasswordInput)
	class Meta:
	    model = User
	    fields = ['email', 'name', 'password', confirmPassword]

	
	def clean(self):
	    password = self.cleaned_data['password']
	    confirmPassword = self.cleaned_data['password']
	    if password != confirmPassword:
		self.add_error('Password didnt match')
	    return self.cleaned_data
	
	def clean_email(self):
	    email = self.cleaned_data['email']
	    if User.objects.get(email=email).exists():
		raise forms.ValidationError('Email exists')
	    return email

How to handle register form post request in views?

def register(request):
    if request.method == 'POST':
	form =  RegisterationForm(request.POST)
	if form.is_valid():
	    user = form.save(commit=False)
	    user.set_password(forms.cleaned_data['password'])
	    user.is_active = False
	    user.save()
	    redirect('login')
    else:
    	form = RegisterationForm()
    return render(request, 'account/register.html', {'form':form})

-----------------------------------------------------------------

Now how to login to access website features?

# Here we are not creating django form for login.
# We will handle things like validation in views.

from django.contrib.auth import authenticate, login

def login_view(request):
    if request.method == 'POST':
	email = request.POST.get('email')
	password = request.POST.get('password')
    	if not email or not password:
	    # can use here messages framework
	    return redirect('login')	
        try:
	    user = User.objects.get(email=email)
        except : 
	    return redirect('login')
	
        if not user.is_active:
	    return redirect('login')
        
        user = authenticate(request, email=email, password=password)
	if user:
	    login(request, user)
	    if user.is_seller:
		return redirect('seller_dashboard')
	    elif user.is_customer:
		return redirect('customer_dashboard')
	    else:
		return redirect('home')  
	else:
	    return redirect('login')  

    if request.user.is_authenticated:
	if request.user.is_seller:
	    redirect('seller_dashboard')
	elif request.user.is_customer:
	    redirect('customer_dashboard')
	else:
	    reidirect('home')
	

- authenticate()
- login()

authenticate():
authenticate is built in function.
It check if user with given username exists, password is correct
using .check_password() internally.
And return User model object.

login():
without login() the user wont stay logged in.
It stores the userid in session.
So, you can access request.user in any view once logged in.
This also allow us to check 
	if request.user.is_authenticated


How to Logout user?
from django.contrib.auth import login, authenticate, logout

def logout_view(request):
    logout(request)
    return redirect('login')


Problems: 
problem 1: 
#Login Form will only open if you hit login end point 'login/'
#So, User can try to access url directly without login like 
	http://127.0.0.1:8000/customer/dashboard
- to avoid this we use decorator @login_required
from django.contrib.auth.decorators import login_required

@login_required
def customer_dashboard_view(request):
    return render(request, 'customer/dashboard.html')

# if user didnt login it will show error to avoid this do below 
setting to redirect user to login page.
In settings.py
LOGIN_URL = 'login'

----------------------------------------------------------------
Things can do further: 
	Implement email using smtp to activate user
	send email to reset password
----------------------------------------------------------------


Problem 2:
Even after using @login_required decorator customer can view seller
dashboard and seller can see customers dashbooard. 
How to restrict role based view?
- This can be done creating cutsomized decorator.

########
- decorator
 It is a function that takes function as an argument and returns 
 warpper function.
 We use @function_name to specify a decorator to be applied on another
 function. 
 e.g.:

def decorator(num):
    def wrapper():
	x = num()
	return x*5
    return wrapper

def num():          
    return 10

new_num = decorator(num)
new_num() ==> 50 


# Using @ for decorator
@decorator
def num():
    return 10

num() == >50 


#How to pass arguments in x= num(), if main function takes arguments 
def num(value)?

def decorator(num):
    def wrapper(*args, **kwargs):
	x = num(*args, **kwargs)
	return x*5
    return new_num

@decorator
def num(value):          
    return value

num(10) ==> 50

- *args
	takes func(10,20,30,40) any number of arguments 
- **kwargs
	takes func(name='Alice', age=25) takes named arguments


#How to pass arguments to decorator? e.g.: to variablize 5 in 
expression x*5
- Will have to create on more outer function to decorator

def outer_argument_decorator(multiplier):
    def decorator(num):
	def wrapper(*args, **kwars):
	    x = num(*args, **kwargs)
	    return x * multiplier
	return new_num
    return decorator

@outer_argument_decorator(multiplier=5)
def num(value):          
    return value

- @wraps(func)
	It is a decorator Used inside a decorator for wrapper function
	This preserves main function meta data like func.__name__, 
	func.__doc__ 
	Why meta data is reuired? 
	- It is used by django for url routing, if not used @wrap
	dajngo will consider wrapper as orinal function name 
	- If error caught in view (in funtion), it will give error
	inside wrapper and not actual funtion name.

def outer_argument_decorator(multiplier):
    def decorator(num):
	@wrap(num)
	def warpper(*args, **kwars):
	    x = num(*args, **kwargs)
	    return x * multiplier
	return new_num
    return decorator


########

- How to create Custom decorator to restrict role?

core app> decorators.py 

from django.contrib.auth.decorators import login_required
from functools import wraps
from django.http import HttpResponse

def login_and_role_required(required_role):
    def decorator(func):
        @wraps(func)
	@login_required
    	def wrapper(request, *args, **kwargs):
            user = request.user
      	    if required_role == "customer" and not user.is_customer:
                return HttpResponse('User must be customer')
      	    if required_role == "seller" and not user.is_seller:
                return HttpResponse('User must be seller')
	return func(request, *args, **kwargs)
    return wrapper
return decorator


settings.py 
LOGIN_URL = 'login'

customer>views.py
@outer_decorator_check_role('customer')
def customer_view(request):
    return render('request', 'customer/customer_dashboard.html')

seller>views.py
@outer_decorator_check_role('seller')
def seller_view(request):
    return render('request', 'seller/seller_dashboard.html')


Problem 3: How can we restrict user from performing diff
actions. 
e.g.: customer must have only access to view products.
seller must have permissions to view, add, change product.
# This can be done by appying permssion to users.

- How to set permissions to user programatically when user 
registers?

#When you use custom user model, userManager then the input fields 
for groups and permissions are not visible in admin panel.

To make these two fields visible on Admin panel we need to 
override PermissionMixin in User class along with 
AbstarctBaseUser class.
	def User(AbstarctBaseUser, PermissionMixin):
		..
After migrations, migarte it creates two tables.
#appname = account
account_user_groups
account_user_user_permissions

To assign user groups and permissions we have certain methods
- myuser.groups.set([group_list])
- myuser.groups.add(group, group)
- myuser.group.remove(group, group)
- myuser.group.clear()
- myuser.user_permissions.set([pemrission_list])
- myuser.user_permissions.add(pemrmission1, permisson2)
- myuser.user_permissions.remove(pemrmission1, permisson2)
- myuser.user_permissions.clear()


Whenever a model is created 4 permissions are formed for each new 
model in auth_user_permissions table.
modelname = product
- view_product
- add_product
- change_product
- delete_product

How to assign this permssiions to user when, user register on 
website? 
#We have two types of user
- customer
- seller
e.g.: customer must have only view product permsission
seller must have view, add, change, delete product permissions

core app> permission_config.py
# Here we will map based on user role which permissions to 
assign

from product.models import Product

PERMISSION_CONFIG = {
	'customer': {
		Product: ['view'], 
		#order:[]
		}, 
	'seller': {
		Product:['view', 'add', 'change'],
		#order:[]
		}
	}


core app> utils.py 
# Here we will assign permissions based on user role 

- Based on PERMISSION_CONFIG we get the model, permission dict
- Then get the ContentType object using model, app name
- Then get the Permissions using content_type object and 
codename
- Then assign this permission in auth_user_user_permissions table.

from django.contrib.auth.models import Permission
from django.contri.contenttypes.models import ContentType
from core.permission_config import PERMISSION_CONFIG 
 
def assign_permission(user, role):
    role_permission = PERMISSION_CONFIG.get(role)
    for model, permissions in role_permission.items():
	content_type = ContentType.objects.get(
			app_label = model._meta.app_label,
			model = model._meta.model_name
			)
	for perm_codename in permissions:
	    Permission.objects.get(
		content_type = content_type,
		codename = f'{perm_codename}_{model._meta.model_name}'
		)
	    user.user_permissions.add(permission)

user_permissions - is a related_name in model 
.add - can be applied to models with many to many fields


account> views.py
from core.utils import assign_permission

def register_view(request):
    if request.method == POST:
	form = RegisterationForm(request.POST):
	if form.is_valid():
	    user = form.save(commit=False)
	    user.set_password(form.cleaned_data['password'])
	    user.is_active = Fale
	    user.save()

	    # create a input or option field for user in register
	    form
	    role = request.POST.get('role')
	    assign_permission(role, user)

	    return redirect('login')
    else:
	form = RegisterationForm()
    return render(request, 'account/register.html', {'form':form})


- Now since permissions are assigned this will restrict customer to
view only products. 
- seller can perform view, add, change, delete actions.
- This permissions are also used by admin panel.

But To login to admin panel via username other that superuser
user must be is_satff = True.
Also, has_perm(self, perm), has_module_perm(self, app_label) must
be set correctly.

def has_perm(self, perm):
    if self.is_superuser:
	return True
    return super().has_perm(self,perm)

def has_module_perm(self, app_label):
    if self.is_superuser:
	return True
    return super().has_module.perm(self, app_label)


# Admin panel works with inbuilt code correctly. 
- How to apply these permissions in views and templates?

e.g.: Suppose we have product form to add products.
list to display products.
edit and delete buttons when you view indvidual product.

Now, customer must only be allowed to add products.
delete button must only be allowed to superuser i.e. admin.

web page structure> 
customer, seller dashboard will have two links to
- add product 
- list product 
  
product app> templates
- add.html
	# created a django form and used it in templates
	# will accepts POST request just like previous register 
	form
- list.html
	# list all the products in product table
	products = Product.objects.all()
	{% for product in products%}
	    <li>
		<a href={% url 'product_detail' product.pk %}>
			{{product.name}}
	    </li>
	{% endfor %}
- detail.html
	# show all details like price, description along with name
	# give buttons to delete and edit
	# edit will take to add.html with prefilled details of 
	object
	# delete will take to delete.html
- delete.html
	# reconfirm like Are you sure you want to delete?
	# give button to submit and delete. 



- applying permissions in views
product app>views.py
from django.contrib.auth.decorators import permission_required

@permission_required('product.add_product', raise_exception=True)
def product_add(request):
	..
- similarliy, apply on product_list, product_view, product_delete 
 functions.


- applying permissions in templates
# If customer then he must not have access to add products link.

customer>templates>dahsboard.html (similar in seller dashboard)
{% if perms.product.add_product %}
    <li><a href="{% url 'product_add'%}"> Product Add</a><li>
{% endif %}


- product.add_product => app_name.permission

context_processors:
- perms, user, messages are all context provided by inbuilt fucntion
in django called context_processors.

We can directly access user varaible in templates. 
diff contexts
- user
- perms
- messages 
   
So, You can do 
	{% if user.is_authenticated %}
		{% if user.is_customer %}
	          <li>
              	   <a href="{% url 'customer_dashboard' %}" class="block py-2 px-3">Dashboard</a>
           	  </li>
		..












 



	







			
































	

	




		










































